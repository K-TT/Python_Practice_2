Python 3.9.7 (v3.9.7:1016ef3790, Aug 30 2021, 16:39:15) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license()" for more information.
>>> import numpy as np
import pprint
>>> import pprint
>>> aa=np.arange(1000)
>>> aa

>>> np.shape(aa)
(1000,)
>>> bb=np.arange(1,100,3)
>>> bb
array([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
       52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97])
>>> t=np.linspace(0,1,101)
>>> t
array([0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ,
       0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,
       0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,
       0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,
       0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54,
       0.55, 0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65,
       0.66, 0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76,
       0.77, 0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87,
       0.88, 0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,
       0.99, 1.  ])
>>> m33=np.ones((3,3))
>>> m33
array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
>>> np.shape(m33)
(3, 3)
>>> m42=np.zeros((4,2))
>>> m42
array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.]])
>>> np.shape(m42)
(4, 2)
>>> d44=np.eye(4)
>>> d44
array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])
>>> np.shape(d44)
(4, 4)
>>> d44_2=np.diag(np.array([1,2,3,4]))
>>> d44_2
array([[1, 0, 0, 0],
       [0, 2, 0, 0],
       [0, 0, 3, 0],
       [0, 0, 0, 4]])
>>> np.shape(d44_2)
(4, 4)
>>> d44_3=np.diag([1,2,3,4])
>>> d44_3
array([[1, 0, 0, 0],
       [0, 2, 0, 0],
       [0, 0, 3, 0],
       [0, 0, 0, 4]])
>>> np.shape(d44_3)
(4, 4)
>>> a=np.array([0,1,2,3])
>>> a
array([0, 1, 2, 3])
>>> L=range(1000)
>>> type(L)L=range(1000)
SyntaxError: invalid syntax
>>> type(L)
<class 'range'>
>>> L
range(0, 1000)
>>> L[0]
0
>>> L[500]
500
>>> L2=[i**2 for i in L]
>>> L2
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 10201, 10404, 10609, 10816, 11025, 11236, 11449, 11664, 11881, 12100, 12321, 12544, 12769, 12996, 13225, 13456, 13689, 13924, 14161, 14400, 14641, 14884, 15129, 15376, 15625, 15876, 16129, 16384, 16641, 16900, 17161, 17424, 17689, 17956, 18225, 18496, 18769, 19044, 19321, 19600, 19881, 20164, 20449, 20736, 21025, 21316, 21609, 21904, 22201, 22500, 22801, 23104, 23409, 23716, 24025, 24336, 24649, 24964, 25281, 25600, 25921, 26244, 26569, 26896, 27225, 27556, 27889, 28224, 28561, 28900, 29241, 29584, 29929, 30276, 30625, 30976, 31329, 31684, 32041, 32400, 32761, 33124, 33489, 33856, 34225, 34596, 34969, 35344, 35721, 36100, 36481, 36864, 37249, 37636, 38025, 38416, 38809, 39204, 39601, 40000, 40401, 40804, 41209, 41616, 42025, 42436, 42849, 43264, 43681, 44100, 44521, 44944, 45369, 45796, 46225, 46656, 47089, 47524, 47961, 48400, 48841, 49284, 49729, 50176, 50625, 51076, 51529, 51984, 52441, 52900, 53361, 53824, 54289, 54756, 55225, 55696, 56169, 56644, 57121, 57600, 58081, 58564, 59049, 59536, 60025, 60516, 61009, 61504, 62001, 62500, 63001, 63504, 64009, 64516, 65025, 65536, 66049, 66564, 67081, 67600, 68121, 68644, 69169, 69696, 70225, 70756, 71289, 71824, 72361, 72900, 73441, 73984, 74529, 75076, 75625, 76176, 76729, 77284, 77841, 78400, 78961, 79524, 80089, 80656, 81225, 81796, 82369, 82944, 83521, 84100, 84681, 85264, 85849, 86436, 87025, 87616, 88209, 88804, 89401, 90000, 90601, 91204, 91809, 92416, 93025, 93636, 94249, 94864, 95481, 96100, 96721, 97344, 97969, 98596, 99225, 99856, 100489, 101124, 101761, 102400, 103041, 103684, 104329, 104976, 105625, 106276, 106929, 107584, 108241, 108900, 109561, 110224, 110889, 111556, 112225, 112896, 113569, 114244, 114921, 115600, 116281, 116964, 117649, 118336, 119025, 119716, 120409, 121104, 121801, 122500, 123201, 123904, 124609, 125316, 126025, 126736, 127449, 128164, 128881, 129600, 130321, 131044, 131769, 132496, 133225, 133956, 134689, 135424, 136161, 136900, 137641, 138384, 139129, 139876, 140625, 141376, 142129, 142884, 143641, 144400, 145161, 145924, 146689, 147456, 148225, 148996, 149769, 150544, 151321, 152100, 152881, 153664, 154449, 155236, 156025, 156816, 157609, 158404, 159201, 160000, 160801, 161604, 162409, 163216, 164025, 164836, 165649, 166464, 167281, 168100, 168921, 169744, 170569, 171396, 172225, 173056, 173889, 174724, 175561, 176400, 177241, 178084, 178929, 179776, 180625, 181476, 182329, 183184, 184041, 184900, 185761, 186624, 187489, 188356, 189225, 190096, 190969, 191844, 192721, 193600, 194481, 195364, 196249, 197136, 198025, 198916, 199809, 200704, 201601, 202500, 203401, 204304, 205209, 206116, 207025, 207936, 208849, 209764, 210681, 211600, 212521, 213444, 214369, 215296, 216225, 217156, 218089, 219024, 219961, 220900, 221841, 222784, 223729, 224676, 225625, 226576, 227529, 228484, 229441, 230400, 231361, 232324, 233289, 234256, 235225, 236196, 237169, 238144, 239121, 240100, 241081, 242064, 243049, 244036, 245025, 246016, 247009, 248004, 249001, 250000, 251001, 252004, 253009, 254016, 255025, 256036, 257049, 258064, 259081, 260100, 261121, 262144, 263169, 264196, 265225, 266256, 267289, 268324, 269361, 270400, 271441, 272484, 273529, 274576, 275625, 276676, 277729, 278784, 279841, 280900, 281961, 283024, 284089, 285156, 286225, 287296, 288369, 289444, 290521, 291600, 292681, 293764, 294849, 295936, 297025, 298116, 299209, 300304, 301401, 302500, 303601, 304704, 305809, 306916, 308025, 309136, 310249, 311364, 312481, 313600, 314721, 315844, 316969, 318096, 319225, 320356, 321489, 322624, 323761, 324900, 326041, 327184, 328329, 329476, 330625, 331776, 332929, 334084, 335241, 336400, 337561, 338724, 339889, 341056, 342225, 343396, 344569, 345744, 346921, 348100, 349281, 350464, 351649, 352836, 354025, 355216, 356409, 357604, 358801, 360000, 361201, 362404, 363609, 364816, 366025, 367236, 368449, 369664, 370881, 372100, 373321, 374544, 375769, 376996, 378225, 379456, 380689, 381924, 383161, 384400, 385641, 386884, 388129, 389376, 390625, 391876, 393129, 394384, 395641, 396900, 398161, 399424, 400689, 401956, 403225, 404496, 405769, 407044, 408321, 409600, 410881, 412164, 413449, 414736, 416025, 417316, 418609, 419904, 421201, 422500, 423801, 425104, 426409, 427716, 429025, 430336, 431649, 432964, 434281, 435600, 436921, 438244, 439569, 440896, 442225, 443556, 444889, 446224, 447561, 448900, 450241, 451584, 452929, 454276, 455625, 456976, 458329, 459684, 461041, 462400, 463761, 465124, 466489, 467856, 469225, 470596, 471969, 473344, 474721, 476100, 477481, 478864, 480249, 481636, 483025, 484416, 485809, 487204, 488601, 490000, 491401, 492804, 494209, 495616, 497025, 498436, 499849, 501264, 502681, 504100, 505521, 506944, 508369, 509796, 511225, 512656, 514089, 515524, 516961, 518400, 519841, 521284, 522729, 524176, 525625, 527076, 528529, 529984, 531441, 532900, 534361, 535824, 537289, 538756, 540225, 541696, 543169, 544644, 546121, 547600, 549081, 550564, 552049, 553536, 555025, 556516, 558009, 559504, 561001, 562500, 564001, 565504, 567009, 568516, 570025, 571536, 573049, 574564, 576081, 577600, 579121, 580644, 582169, 583696, 585225, 586756, 588289, 589824, 591361, 592900, 594441, 595984, 597529, 599076, 600625, 602176, 603729, 605284, 606841, 608400, 609961, 611524, 613089, 614656, 616225, 617796, 619369, 620944, 622521, 624100, 625681, 627264, 628849, 630436, 632025, 633616, 635209, 636804, 638401, 640000, 641601, 643204, 644809, 646416, 648025, 649636, 651249, 652864, 654481, 656100, 657721, 659344, 660969, 662596, 664225, 665856, 667489, 669124, 670761, 672400, 674041, 675684, 677329, 678976, 680625, 682276, 683929, 685584, 687241, 688900, 690561, 692224, 693889, 695556, 697225, 698896, 700569, 702244, 703921, 705600, 707281, 708964, 710649, 712336, 714025, 715716, 717409, 719104, 720801, 722500, 724201, 725904, 727609, 729316, 731025, 732736, 734449, 736164, 737881, 739600, 741321, 743044, 744769, 746496, 748225, 749956, 751689, 753424, 755161, 756900, 758641, 760384, 762129, 763876, 765625, 767376, 769129, 770884, 772641, 774400, 776161, 777924, 779689, 781456, 783225, 784996, 786769, 788544, 790321, 792100, 793881, 795664, 797449, 799236, 801025, 802816, 804609, 806404, 808201, 810000, 811801, 813604, 815409, 817216, 819025, 820836, 822649, 824464, 826281, 828100, 829921, 831744, 833569, 835396, 837225, 839056, 840889, 842724, 844561, 846400, 848241, 850084, 851929, 853776, 855625, 857476, 859329, 861184, 863041, 864900, 866761, 868624, 870489, 872356, 874225, 876096, 877969, 879844, 881721, 883600, 885481, 887364, 889249, 891136, 893025, 894916, 896809, 898704, 900601, 902500, 904401, 906304, 908209, 910116, 912025, 913936, 915849, 917764, 919681, 921600, 923521, 925444, 927369, 929296, 931225, 933156, 935089, 937024, 938961, 940900, 942841, 944784, 946729, 948676, 950625, 952576, 954529, 956484, 958441, 960400, 962361, 964324, 966289, 968256, 970225, 972196, 974169, 976144, 978121, 980100, 982081, 984064, 986049, 988036, 990025, 992016, 994009, 996004, 998001]
>>> setup='''
import numpy as np
L =range(1000)
a=np.arange(1000)
'''
>>> import timeit
>>> timeit.timeit("[i**2 for i in L]", setup)
565.460705444
>>> timeit.timeit("[i**2 for i in L]", setup,number =10)
0.00564563700004328
>>> timeit.timeit("[i**2 for i in L]", setup,number =100)
0.04825933200004329
>>> timeit.timeit("[a+1]", setup,number =100)
0.0017262599999412487
>>> setupL='''
import numpy as np
a=np.arange(10000)
'''
>>> timeit.timeit("[a+1]", setupL,number =100)
0.0007653190000382892
>>> timeit.timeit("[a+1]", setupL,number =10000)

0.09515658899999835
>>> timeit.timeit("[a+1]", setupL,number =100000)
0.6500954740001816
>>> timeit.timeit("[a**2]", setupL,number =100000)
1.3091841810000915
>>> timeit.timeit("[a**2]", setupL,number =100000)
0.6683733689999372
>>> timeit.timeit("[a**2]", setupL,number =1000000)
6.753218962000119
>>> timeit.timeit("[a**2]", setupL)
7.534523985000078
>>> timeit.timeit("[a+2]", setupL)
7.9529141020000225
>>> timeit.timeit("[a-2]", setupL)
8.174111684999843
>>> timeit.timeit("[a/2]", setupL)
28.70892114900016
>>> timeit.timeit("[a*2]", setupL)
9.27464136399999
>>> timeit.timeit("[a**3]", setupL)
37.79089028499993
>>> help(np.random)

>>> u4=np.random.rand(100)
>>> u4
array([0.52487144, 0.33927984, 0.2819034 , 0.24061356, 0.50390602,
       0.07217215, 0.57368461, 0.28823596, 0.99745913, 0.33806981,
       0.22633829, 0.56328906, 0.09708002, 0.05003073, 0.6560088 ,
       0.46632218, 0.0801408 , 0.29059189, 0.35127782, 0.22988622,
       0.78067503, 0.47691244, 0.34844869, 0.38704703, 0.29768567,
       0.51209928, 0.12529108, 0.08678825, 0.51087544, 0.46601692,
       0.06276285, 0.1529886 , 0.13811778, 0.08320846, 0.0056748 ,
       0.89519107, 0.55866064, 0.7698406 , 0.75894331, 0.08897609,
       0.70796179, 0.82230981, 0.791555  , 0.14056452, 0.23569543,
       0.71428707, 0.78036967, 0.21101024, 0.34016805, 0.85485542,
       0.46200824, 0.39109998, 0.3862281 , 0.93912825, 0.76360748,
       0.54058282, 0.21826459, 0.71270025, 0.45359222, 0.09792192,
       0.54584638, 0.34473664, 0.22064838, 0.76041077, 0.50808933,
       0.49362912, 0.66712804, 0.72178132, 0.71218193, 0.64473992,
       0.65006264, 0.98065111, 0.40954929, 0.06999931, 0.41080584,
       0.82413995, 0.08974446, 0.99952205, 0.50376117, 0.16935696,
       0.70963907, 0.09779428, 0.16248515, 0.88710255, 0.527282  ,
       0.65480658, 0.41298211, 0.38336399, 0.50626523, 0.00314946,
       0.88480657, 0.73331882, 0.75225869, 0.27460608, 0.50993027,
       0.17876546, 0.07300426, 0.74828141, 0.46710656, 0.58068238])
>>> n4=np.random.randn(100)
>>> n4
array([-0.58272373, -1.73646279,  0.03078979,  0.09017721, -1.43510177,
       -0.84444812, -0.32537774,  0.69199801, -1.69579537,  0.38558293,
       -0.16885743, -1.98028795,  2.14089899, -0.7647736 , -0.6263173 ,
        1.85094733,  1.38659065, -0.66057297,  0.06671984, -0.32690953,
       -0.13066713, -1.00548811, -0.01284774, -0.05219896,  0.26026188,
        0.41647407,  0.38900973, -0.57531267, -0.94397032, -0.66272751,
        0.2993071 , -1.86760541, -0.71106086,  0.64129125,  0.89028814,
        0.68536962,  0.78424113,  1.07984596,  0.20053087,  1.5042973 ,
       -0.06848408,  0.37280629,  1.23614605, -1.38801487, -1.10187654,
        1.9397603 , -0.3143471 ,  0.11161363,  0.86720486,  0.83864695,
       -1.78531122, -0.24254177,  0.14450231, -1.37085929, -0.50342601,
       -0.2032776 , -0.27727741, -0.64008098, -0.5374439 , -0.07252044,
       -1.64197945, -1.66746719, -0.197035  ,  0.16644967, -0.97060429,
       -0.54920099, -0.694306  ,  0.69236292, -0.26128665, -0.34324407,
        0.85990306,  1.07757008, -1.9255515 ,  0.57921676, -0.23202506,
        0.47099326, -0.4623301 , -1.31477471, -1.0850675 , -1.70930541,
       -1.11789221, -1.06675925,  1.82349767,  0.49058272, -1.09745534,
        1.00605661, -1.13315866, -0.05739327,  0.04209333,  0.34763954,
        2.41252539, -0.9596021 ,  0.68780768, -0.7255938 ,  1.09620267,
        0.11008798, -2.33213775,  0.28781337, -1.2127071 , -0.07889586])
>>> np.random.seed(12)
>>> u3=np.random.rand(3)
>>> n3
Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    n3
NameError: name 'n3' is not defined
>>> u3
array([0.15416284, 0.7400497 , 0.26331502])
>>> n3=np.random.randn(3)
>>> n3
array([-0.32889474,  0.02285978, -0.42069204])
>>> ra24_u=np.random.random((2,4))
>>> ra24_u
array([[0.60608318, 0.94422514, 0.85273554, 0.00225923],
       [0.52122603, 0.55203763, 0.48537741, 0.76813415]])
>>> f55_7=np.full((5,5),7)
>>> f55_7
array([[7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7]])
>>> ea=np.empty
>>> ea
<built-in function empty>
>>> f55_7.dtype
dtype('int64')
>>> n3.dtype
dtype('float64')
>>> u3.dtype
dtype('float64')
>>> a66=np.arange(0,56)
>>> a66.reshape((7,8))
array([[ 0,  1,  2,  3,  4,  5,  6,  7],
       [ 8,  9, 10, 11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29, 30, 31],
       [32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47],
       [48, 49, 50, 51, 52, 53, 54, 55]])
>>> a66.reshape((8,7))
array([[ 0,  1,  2,  3,  4,  5,  6],
       [ 7,  8,  9, 10, 11, 12, 13],
       [14, 15, 16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25, 26, 27],
       [28, 29, 30, 31, 32, 33, 34],
       [35, 36, 37, 38, 39, 40, 41],
       [42, 43, 44, 45, 46, 47, 48],
       [49, 50, 51, 52, 53, 54, 55]])
>>> a36=np.arange(0,36)
>>> a36
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35])
>>> a36.reshape((6,6))
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])
>>> a36
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35])
>>> b66=a36.reshape((6,6))
>>> b66
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])
>>> b66[0,3:5]
array([3, 4])
>>> b66[4:,4:]
array([[28, 29],
       [34, 35]])
>>> b66[:,2]
array([ 2,  8, 14, 20, 26, 32])
>>> b66[2::2,::2]
array([[12, 14, 16],
       [24, 26, 28]])
>>> lst4=[1,2,3,4,5]
>>> lst4[:]
[1, 2, 3, 4, 5]
>>> lst4[2:]
[3, 4, 5]
>>> lst4[2::2]
[3, 5]
>>> lst4[::2]
[1, 3, 5]
>>> np.shape(b66)
(6, 6)
>>> b66[4,5]
29
>>> a= np.arange(5)
>>> a
array([0, 1, 2, 3, 4])
>>> np.sin(a)
array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ])
>>> np.log(a)

Warning (from warnings module):
  File "<pyshell#103>", line 1
RuntimeWarning: divide by zero encountered in log
array([      -inf, 0.        , 0.69314718, 1.09861229, 1.38629436])
>>> np.exp(a)
array([ 1.        ,  2.71828183,  7.3890561 , 20.08553692, 54.59815003])
>>> b=np.eye(4)
>>> b
array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])
>>> np.sin(b)
array([[0.84147098, 0.        , 0.        , 0.        ],
       [0.        , 0.84147098, 0.        , 0.        ],
       [0.        , 0.        , 0.84147098, 0.        ],
       [0.        , 0.        , 0.        , 0.84147098]])
>>> np.log(b)
array([[  0., -inf, -inf, -inf],
       [-inf,   0., -inf, -inf],
       [-inf, -inf,   0., -inf],
       [-inf, -inf, -inf,   0.]])
>>> np.log(b)
array([[  0., -inf, -inf, -inf],
       [-inf,   0., -inf, -inf],
       [-inf, -inf,   0., -inf],
       [-inf, -inf, -inf,   0.]])
>>> np.exp(b)
array([[2.71828183, 1.        , 1.        , 1.        ],
       [1.        , 2.71828183, 1.        , 1.        ],
       [1.        , 1.        , 2.71828183, 1.        ],
       [1.        , 1.        , 1.        , 2.71828183]])
>>> c=np.arange(9).reshape(3,3)
>>> c
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
>>> np.triu(c)
array([[0, 1, 2],
       [0, 4, 5],
       [0, 0, 8]])
>>> np.tril(c)
array([[0, 0, 0],
       [3, 4, 0],
       [6, 7, 8]])
>>> np.diag(c)
array([0, 4, 8])
>>> c.T
array([[0, 3, 6],
       [1, 4, 7],
       [2, 5, 8]])
>>> np.sum(c)
36
>>> c.sum(axis=0)
array([ 9, 12, 15])
>>> c.sum(axis=1)
array([ 3, 12, 21])
>>> c[0,:].sum()
3
>>> c[0,:].min()
0
>>> c[0,:].max
<built-in method max of numpy.ndarray object at 0x7fac58cf4c30>
>>> c[0,:].max()
2
>>> c.argmax()
8
>>> c.argmin()
0
>>> c[1,:]
array([3, 4, 5])
>>> c[1,2:]
array([5])
>>> c[1,1:]
array([4, 5])
>>> c[1,::2]
array([3, 5])
>>> c.T[0,:].max()
6
>>> c.argmax()
8
>>> c.argmin()
0
>>> c[1,:].argmin()
0
>>> c[1,:].argmax()
2
>>> c[1,:]
array([3, 4, 5])
>>> ba[True, True, False]
Traceback (most recent call last):
  File "<pyshell#136>", line 1, in <module>
    ba[True, True, False]
NameError: name 'ba' is not defined
>>> ba=[True, True, False]
>>> np.all(ba)
False
>>> np.any(ba)
True
>>> np.any(ba[2:])
False
>>> ba[:2]
[True, True]
>>> a0=np.zeros((100,100))
>>> a0
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> np.any(a0 != 0)
False
>>> np.any(a0==0)
True
>>> a0==0
array([[ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       ...,
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True]])
>>> a0!=0
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> np.all(a0--0)
False
>>> np.all(a0==0)
True
>>> np.all(a0!=0)
False
>>> c.mean()
4.0
>>> a
array([0, 1, 2, 3, 4])
>>> a.mean()
2.0
>>> np.median(a)
2.0
>>> np.mean(c)
4.0
>>> np.median(c,axis=0)
array([3., 4., 5.])
>>> np.median(c,axis=1)
array([1., 4., 7.])
>>> c
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
>>> np.std(c)
2.581988897471611
>>> np.std(c,axis=0)
array([2.44948974, 2.44948974, 2.44948974])
>>> np.std(c,axis=-1)
array([0.81649658, 0.81649658, 0.81649658])
>>> np.std(c,axis=1)
array([0.81649658, 0.81649658, 0.81649658])
>>> a333=np.arange(27).reshape((3,3,3))
>>> a333
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]]])
>>> np.std(a333,axis=-1)
array([[0.81649658, 0.81649658, 0.81649658],
       [0.81649658, 0.81649658, 0.81649658],
       [0.81649658, 0.81649658, 0.81649658]])
>>> np.std(a33,axis=2)
Traceback (most recent call last):
  File "<pyshell#166>", line 1, in <module>
    np.std(a33,axis=2)
NameError: name 'a33' is not defined
>>> np.std(a333,axis=2)
array([[0.81649658, 0.81649658, 0.81649658],
       [0.81649658, 0.81649658, 0.81649658],
       [0.81649658, 0.81649658, 0.81649658]])
>>> np.std(a333,axis=1)
array([[2.44948974, 2.44948974, 2.44948974],
       [2.44948974, 2.44948974, 2.44948974],
       [2.44948974, 2.44948974, 2.44948974]])
>>> np.std(a333,axis=0)
array([[7.34846923, 7.34846923, 7.34846923],
       [7.34846923, 7.34846923, 7.34846923],
       [7.34846923, 7.34846923, 7.34846923]])
>>> np.std(a333)
7.788880963698615
>>> a
array([0, 1, 2, 3, 4])
>>> np.mean(a)
2.0
>>> np.std(a)
1.4142135623730951
>>> c[1,:].argmin()
0
>>> c[1,:].argmax()
2
>>> ba=[True,True,False]
>>> np.all(ba)
False
>>> 